{"version":3,"file":"static/js/382.8e970579.chunk.js","mappings":"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","sources":["components/MovieInformation/MovieInformation.styled.jsx","components/MovieInformation/MovieInformation.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/Notiflix.js","services/RequestApi.js","services/defaultImg.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const InfoWrap = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 24px;\n  justify-content: center;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport const Img = styled.img`\n  border-radius: 6px;\n`;\n\nexport const InfoBox = styled.div`\n  display: grid;\n`;\n\nexport const Text = styled.p`\n  padding: 4px;\n  font-size: 18px;\n  text-align: justify;\n`;\n\nexport const AddInfoWrap = styled.div`\n  display: grid;\n  gap: 20px;\n  padding: 24px;\n  justify-content: center;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const LinkInfo = styled(NavLink)`\n  display: block;\n  text-align: center;\n  font-size: 20px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  padding: 6px;\n  background-color: #e7e4e4;\n  width: 80px;\n\n  &.active {\n    font-weight: bold;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 20px;\n  margin: 0 auto;\n`;\n","import { defaultImg } from 'services/defaultImg';\nimport {\n  AddInfoWrap,\n  Img,\n  InfoBox,\n  InfoWrap,\n  Text,\n  LinkInfo,\n  List,\n} from './MovieInformation.styled';\n\nconst MovieInformation = ({ movie }) => {\n  const { title, release_date, overview, genres, poster_path, vote_average } =\n    movie;\n\n  const poster =\n    poster_path && poster_path.length > 0\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : defaultImg;\n\n  const releaseYear = new Date(release_date).getFullYear();\n\n  const popularity = Math.round(vote_average * 10);\n\n  const genresList =\n    genres && genres.length > 0\n      ? genres.map(genre => genre.name).join(', ')\n      : 'There is no genres for this movie';\n\n  return (\n    <>\n      <InfoWrap>\n        <Img src={poster} alt={title} width=\"300\" />\n        <InfoBox>\n          <h1>\n            {title} ({releaseYear})\n          </h1>\n          <Text>User Score: {popularity}%</Text>\n          <h2>Overview</h2>\n          <Text>\n            {overview ? overview : 'There is no overview for this movie'}\n          </Text>\n          <h2>Genres</h2>\n          <Text>{genresList}</Text>\n        </InfoBox>\n      </InfoWrap>\n\n      <AddInfoWrap>\n        <h2>Additional information</h2>\n        <List>\n          <li>\n            <LinkInfo to=\"cast\">Cast</LinkInfo>\n          </li>\n          <li>\n            <LinkInfo to=\"reviews\">Reviews</LinkInfo>\n          </li>\n        </List>\n      </AddInfoWrap>\n    </>\n  );\n};\nexport default MovieInformation;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const LinkGoBack = styled(Link)`\n  display: block;\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  padding: 10px;\n  margin-bottom: 24px;\n  background-color: #e7e4e4;\n  width: 80px;\n\n  &:hover {\n    font-weight: bold;\n    background-color: #5a5757;\n    color: #fff;\n  }\n`;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetailsApi } from 'services/RequestApi';\nimport Loader from 'components/Loader/Loader';\nimport MovieInformation from 'components/MovieInformation/MovieInformation';\nimport { LinkGoBack } from './MovieDetails.styled';\nimport { errorMessage } from 'services/Notiflix';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieDetails = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMovieDetailsApi(movieId);\n        setMovie(data);\n      } catch (error) {\n        errorMessage(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      <LinkGoBack to={backLink.current}>Go back</LinkGoBack>\n      {(isLoading && <Loader />) || <MovieInformation movie={movie} />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\n\nconst notiflixParams = {\n  position: 'center-center',\n  timeout: 3000,\n  width: '400px',\n  fontSize: '20px',\n};\n\nexport function infoEmptyMessage() {\n  Notiflix.Notify.info('Enter your request, please!', notiflixParams);\n}\n\nexport function errorMessage() {\n  Notiflix.Notify.failure(\n    'Sorry, there are no images matching your search query. Please try again.',\n    notiflixParams\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1a58fcece4729e6d5135f76aceb40c92';\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMoviesApi = async () => {\n  const { data } = await axios.get(`trending/movie/day`, params);\n  return data.results;\n};\n\nexport const fetchSearchMoviesApi = async movieName => {\n  const { data } = await axios.get(`/search/movie?query=${movieName}`, params);\n  return data.results;\n};\n\nexport const fetchMovieDetailsApi = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`, params);\n  return data;\n};\n\nexport const fetchMovieCastApi = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, params);\n  return data.cast;\n};\n\nexport const fetchMovieReviewsApi = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, params);\n  return data.results;\n};\n","export const defaultImg =\n  'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg';\n"],"names":["InfoWrap","styled","_templateObject","_taggedTemplateLiteral","Img","_templateObject2","InfoBox","_templateObject3","Text","_templateObject4","AddInfoWrap","_templateObject5","LinkInfo","NavLink","_templateObject6","List","_templateObject7","_ref","movie","title","release_date","overview","genres","poster_path","vote_average","poster","length","concat","defaultImg","releaseYear","Date","getFullYear","popularity","Math","round","genresList","map","genre","name","join","_jsxs","_Fragment","children","_jsx","src","alt","width","to","LinkGoBack","Link","_location$state$from","_location$state","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","fetchMovieDetails","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieDetailsApi","sent","t0","errorMessage","finish","stop","apply","arguments","current","Loader","MovieInformation","Suspense","fallback","Outlet","notiflixParams","position","timeout","fontSize","infoEmptyMessage","Notiflix","axios","params","api_key","language","fetchTrendingMoviesApi","_yield$axios$get","abrupt","results","fetchSearchMoviesApi","_ref2","_callee2","movieName","_yield$axios$get2","_context2","_x","_ref3","_callee3","_yield$axios$get3","_context3","_x2","fetchMovieCastApi","_ref4","_callee4","_yield$axios$get4","_context4","cast","_x3","fetchMovieReviewsApi","_ref5","_callee5","_yield$axios$get5","_context5","_x4"],"sourceRoot":""}